{"version":3,"sources":["../src/handler.ts"],"names":[],"mappings":";;;;AAkBO,SAAS,oBAAoB,MAAA,EAA6B;AAC/D,EAAA,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO;AAAA,IACxB,UAAU,MAAA,CAAO,QAAA;AAAA,IACjB,OAAO,MAAA,CAAO;AAAA,GACf,CAAA;AAED,EAAA,OAAO,eAAe,cAAc,GAAA,EAAkB;AACpD,IAAA,IAAI;AAEF,MAAA,IAAI,GAAA,CAAI,WAAW,SAAA,EAAW;AAC5B,QAAA,OAAO,IAAI,aAAa,IAAA,EAAM;AAAA,UAC5B,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS;AAAA,YACP,6BAAA,EAA+B,GAAA;AAAA,YAC/B,8BAAA,EAAgC,iCAAA;AAAA,YAChC,8BAAA,EAAgC,6BAAA;AAAA,YAChC,GAAG,MAAA,CAAO;AAAA;AACZ,SACD,CAAA;AAAA,MACH;AAGA,MAAA,MAAM,EAAE,UAAA,EAAW,GAAI,MAAM,MAAA,CAAO,SAAS,GAAG,CAAA;AAEhD,MAAA,IAAI,CAAC,UAAA,EAAY;AACf,QAAA,OAAO,YAAA,CAAa,KAAK,EAAE,KAAA,EAAO,2BAA0B,EAAG,EAAE,MAAA,EAAQ,GAAA,EAAK,CAAA;AAAA,MAChF;AAGA,MAAA,MAAM,IAAA,GAAO,MAAM,GAAA,CAAI,IAAA,GAAO,KAAA,CAAM,OAAO,EAAC,CAAE,CAAA;AAC9C,MAAA,MAAM,EAAE,MAAA,EAAQ,GAAG,MAAA,EAAO,GAAI,IAAA;AAG9B,MAAA,IAAI,MAAA;AAEJ,MAAA,QAAQ,MAAA;AAAQ,QACd,KAAK,gBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,cAAA,CAAe,MAAM,CAAA;AAC3C,UAAA;AAAA,QACF,KAAK,aAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,WAAA,CAAY,MAAA,CAAO,EAAE,CAAA;AAC3C,UAAA;AAAA,QACF,KAAK,gBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,cAAA,CAAe,MAAA,CAAO,EAAA,EAAI,OAAO,OAAO,CAAA;AAC9D,UAAA;AAAA,QACF,KAAK,gBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,cAAA,CAAe,MAAA,CAAO,EAAE,CAAA;AAC9C,UAAA;AAAA,QACF,KAAK,eAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,aAAA,CAAc,MAAA,CAAO,OAAO,CAAA;AAClD,UAAA;AAAA,QACF,KAAK,qBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,mBAAA,CAAoB,MAAM,CAAA;AAChD,UAAA;AAAA,QACF,KAAK,kBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,gBAAA,CAAiB,MAAA,CAAO,EAAE,CAAA;AAChD,UAAA;AAAA,QACF,KAAK,qBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,mBAAA,CAAoB,MAAA,CAAO,EAAA,EAAI,OAAO,OAAO,CAAA;AACnE,UAAA;AAAA,QACF,KAAK,qBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,mBAAA,CAAoB,MAAA,CAAO,EAAE,CAAA;AACnD,UAAA;AAAA,QACF,KAAK,sBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,oBAAA,CAAqB,MAAA,CAAO,EAAA,EAAI,OAAO,eAAe,CAAA;AAC5E,UAAA;AAAA,QACF,KAAK,sBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,oBAAA,CAAqB,MAAA,CAAO,EAAA,EAAI,OAAO,MAAM,CAAA;AACnE,UAAA;AAAA,QACF,KAAK,oBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,kBAAA,CAAmB,MAAA,CAAO,OAAO,CAAA;AACvD,UAAA;AAAA,QACF,KAAK,oBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,kBAAA,CAAmB,MAAM,CAAA;AAC/C,UAAA;AAAA,QACF,KAAK,iBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,eAAA,CAAgB,MAAA,CAAO,EAAE,CAAA;AAC/C,UAAA;AAAA,QACF,KAAK,oBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,kBAAA,CAAmB,MAAA,CAAO,EAAA,EAAI,OAAO,OAAO,CAAA;AAClE,UAAA;AAAA,QACF,KAAK,oBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,kBAAA,CAAmB,MAAA,CAAO,EAAE,CAAA;AAClD,UAAA;AAAA,QACF,KAAK,mBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,iBAAA,CAAkB,MAAM,CAAA;AAC9C,UAAA;AAAA,QACF,KAAK,eAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,aAAA,CAAc,MAAM,CAAA;AAC1C,UAAA;AAAA,QACF,KAAK,YAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,UAAA,CAAW,MAAA,CAAO,EAAE,CAAA;AAC1C,UAAA;AAAA,QACF,KAAK,eAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,aAAA,CAAc,MAAA,CAAO,EAAA,EAAI,OAAO,OAAO,CAAA;AAC7D,UAAA;AAAA,QACF,KAAK,iBAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,eAAA,CAAgB,MAAA,CAAO,EAAE,CAAA;AAC/C,UAAA;AAAA,QACF,KAAK,YAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,UAAA,CAAW,MAAA,CAAO,EAAA,EAAI,OAAO,eAAe,CAAA;AAClE,UAAA;AAAA,QACF,KAAK,cAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,YAAA,CAAa,MAAA,CAAO,OAAO,CAAA;AACjD,UAAA;AAAA,QACF,KAAK,cAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,YAAA,CAAa,MAAM,CAAA;AACzC,UAAA;AAAA,QACF,KAAK,WAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,SAAA,CAAU,MAAA,CAAO,EAAE,CAAA;AACzC,UAAA;AAAA,QACF,KAAK,aAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,WAAA,CAAY,MAAA,CAAO,SAAS,CAAA;AAClD,UAAA;AAAA,QACF,KAAK,YAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,UAAA,CAAW,MAAM,CAAA;AACvC,UAAA;AAAA,QACF,KAAK,cAAA;AACH,UAAA,MAAA,GAAS,MAAM,MAAA,CAAO,YAAA,CAAa,MAAM,CAAA;AACzC,UAAA;AAAA,QACF,KAAK,iBAAA;AACH,UAAA,MAAA,GAAS,MAAM,OAAO,eAAA,CAAgB,MAAA,CAAO,YAAY,MAAA,CAAO,SAAA,EAAW,OAAO,MAAM,CAAA;AACxF,UAAA;AAAA,QACF,KAAK,mBAAA;AACH,UAAA,MAAA,GAAS,MAAM,OAAO,iBAAA,CAAkB,MAAA,CAAO,YAAY,MAAA,CAAO,OAAA,EAAS,OAAO,MAAM,CAAA;AACxF,UAAA;AAAA,QACF;AACE,UAAA,OAAO,YAAA,CAAa,IAAA,CAAK,EAAE,KAAA,EAAO,CAAA,gBAAA,EAAmB,MAAM,CAAA,CAAA,EAAG,EAAG,EAAE,MAAA,EAAQ,GAAA,EAAK,CAAA;AAAA;AAGpF,MAAA,OAAO,YAAA,CAAa,KAAK,MAAA,EAAQ;AAAA,QAC/B,OAAA,EAAS;AAAA,UACP,6BAAA,EAA+B,GAAA;AAAA,UAC/B,8BAAA,EAAgC,iCAAA;AAAA,UAChC,8BAAA,EAAgC,6BAAA;AAAA,UAChC,GAAG,MAAA,CAAO;AAAA;AACZ,OACD,CAAA;AAAA,IACH,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,yBAAyB,KAAK,CAAA;AAE5C,MAAA,OAAO,YAAA,CAAa,IAAA;AAAA,QAClB;AAAA,UACE,KAAA,EAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU,uBAAA;AAAA,UAChD,OAAA,EAAS;AAAA,SACX;AAAA,QACA;AAAA,UACE,MAAA,EAAQ,GAAA;AAAA,UACR,OAAA,EAAS;AAAA,YACP,6BAAA,EAA+B,GAAA;AAAA,YAC/B,8BAAA,EAAgC,iCAAA;AAAA,YAChC,8BAAA,EAAgC,6BAAA;AAAA,YAChC,GAAG,MAAA,CAAO;AAAA;AACZ;AACF,OACF;AAAA,IACF;AAAA,EACF,CAAA;AACF;AAMO,SAAS,2BAA2B,MAAA,EAA6B;AACtE,EAAA,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO;AAAA,IACxB,UAAU,MAAA,CAAO,QAAA;AAAA,IACjB,OAAO,MAAA,CAAO;AAAA,GACf,CAAA;AAED,EAAA,OAAO,eAAe,qBAAqB,GAAA,EAAkB;AAC3D,IAAA,IAAI;AACF,MAAA,MAAM,IAAA,GAAO,MAAM,GAAA,CAAI,IAAA,EAAK;AAC5B,MAAA,MAAM,SAAA,GACJ,GAAA,CAAI,OAAA,CAAQ,GAAA,CAAI,kBAAkB,CAAA,IAClC,GAAA,CAAI,OAAA,CAAQ,GAAA,CAAI,oBAAoB,CAAA,IACpC,GAAA,CAAI,OAAA,CAAQ,GAAA,CAAI,aAAa,CAAA,IAC7B,EAAA;AAEF,MAAA,MAAM,aAAA,GAAgB,OAAO,QAAA,CAAS,aAAA;AACtC,MAAA,IAAI,CAAC,aAAA,EAAe;AAClB,QAAA,OAAO,YAAA,CAAa,KAAK,EAAE,KAAA,EAAO,iCAAgC,EAAG,EAAE,MAAA,EAAQ,GAAA,EAAK,CAAA;AAAA,MACtF;AAGA,MAAA,MAAM,UAAU,MAAM,MAAA,CAAO,aAAA,CAAc,IAAA,EAAM,WAAW,aAAa,CAAA;AACzE,MAAA,IAAI,CAAC,OAAA,EAAS;AACZ,QAAA,OAAO,YAAA,CAAa,KAAK,EAAE,KAAA,EAAO,6BAA4B,EAAG,EAAE,MAAA,EAAQ,GAAA,EAAK,CAAA;AAAA,MAClF;AAGA,MAAA,MAAM,QAAQ,MAAM,MAAA,CAAO,YAAA,CAAa,IAAA,EAAM,WAAW,aAAa,CAAA;AAItE,MAAA,OAAA,CAAQ,GAAA,CAAI,2BAA2B,KAAK,CAAA;AAE5C,MAAA,OAAO,YAAA,CAAa,IAAA,CAAK,EAAE,QAAA,EAAU,MAAM,CAAA;AAAA,IAC7C,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,KAAA,CAAM,iCAAiC,KAAK,CAAA;AAEpD,MAAA,OAAO,YAAA,CAAa,IAAA;AAAA,QAClB;AAAA,UACE,KAAA,EAAO,KAAA,YAAiB,KAAA,GAAQ,KAAA,CAAM,OAAA,GAAU;AAAA,SAClD;AAAA,QACA,EAAE,QAAQ,GAAA;AAAI,OAChB;AAAA,IACF;AAAA,EACF,CAAA;AACF;AAMO,SAAS,0BAA0B,MAAA,EAA6B;AACrE,EAAA,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO;AAAA,IACxB,UAAU,MAAA,CAAO,QAAA;AAAA,IACjB,OAAO,MAAA,CAAO;AAAA,GACf,CAAA;AAED,EAAA,OAAO;AAAA,IACL,MAAM,eAAe,MAAA,EAAa;AAChC,MAAA,OAAO,MAAM,MAAA,CAAO,cAAA,CAAe,MAAM,CAAA;AAAA,IAC3C,CAAA;AAAA,IAEA,MAAM,YAAY,EAAA,EAAY;AAC5B,MAAA,OAAO,MAAM,MAAA,CAAO,WAAA,CAAY,EAAE,CAAA;AAAA,IACpC,CAAA;AAAA,IAEA,MAAM,cAAA,CAAe,EAAA,EAAY,OAAA,EAAc;AAC7C,MAAA,OAAO,MAAM,MAAA,CAAO,cAAA,CAAe,EAAA,EAAI,OAAO,CAAA;AAAA,IAChD,CAAA;AAAA,IAEA,MAAM,eAAe,EAAA,EAAY;AAC/B,MAAA,OAAO,MAAM,MAAA,CAAO,cAAA,CAAe,EAAE,CAAA;AAAA,IACvC,CAAA;AAAA,IAEA,MAAM,cAAc,OAAA,EAAe;AACjC,MAAA,OAAO,MAAM,MAAA,CAAO,aAAA,CAAc,OAAO,CAAA;AAAA,IAC3C,CAAA;AAAA,IAEA,MAAM,oBAAoB,MAAA,EAAa;AACrC,MAAA,OAAO,MAAM,MAAA,CAAO,mBAAA,CAAoB,MAAM,CAAA;AAAA,IAChD,CAAA;AAAA,IAEA,MAAM,iBAAiB,EAAA,EAAY;AACjC,MAAA,OAAO,MAAM,MAAA,CAAO,gBAAA,CAAiB,EAAE,CAAA;AAAA,IACzC,CAAA;AAAA,IAEA,MAAM,mBAAA,CAAoB,EAAA,EAAY,OAAA,EAAc;AAClD,MAAA,OAAO,MAAM,MAAA,CAAO,mBAAA,CAAoB,EAAA,EAAI,OAAO,CAAA;AAAA,IACrD,CAAA;AAAA,IAEA,MAAM,oBAAoB,EAAA,EAAY;AACpC,MAAA,OAAO,MAAM,MAAA,CAAO,mBAAA,CAAoB,EAAE,CAAA;AAAA,IAC5C,CAAA;AAAA,IAEA,MAAM,oBAAA,CAAqB,EAAA,EAAY,eAAA,EAA0B;AAC/D,MAAA,OAAO,MAAM,MAAA,CAAO,oBAAA,CAAqB,EAAA,EAAI,eAAe,CAAA;AAAA,IAC9D,CAAA;AAAA,IAEA,MAAM,oBAAA,CAAqB,EAAA,EAAY,MAAA,EAAiB;AACtD,MAAA,OAAO,MAAM,MAAA,CAAO,oBAAA,CAAqB,EAAA,EAAI,MAAM,CAAA;AAAA,IACrD,CAAA;AAAA,IAEA,MAAM,mBAAmB,OAAA,EAAe;AACtC,MAAA,OAAO,MAAM,MAAA,CAAO,kBAAA,CAAmB,OAAO,CAAA;AAAA,IAChD,CAAA;AAAA,IAEA,MAAM,mBAAmB,MAAA,EAAa;AACpC,MAAA,OAAO,MAAM,MAAA,CAAO,kBAAA,CAAmB,MAAM,CAAA;AAAA,IAC/C,CAAA;AAAA,IAEA,MAAM,gBAAgB,EAAA,EAAY;AAChC,MAAA,OAAO,MAAM,MAAA,CAAO,eAAA,CAAgB,EAAE,CAAA;AAAA,IACxC,CAAA;AAAA,IAEA,MAAM,kBAAA,CAAmB,EAAA,EAAY,OAAA,EAAc;AACjD,MAAA,OAAO,MAAM,MAAA,CAAO,kBAAA,CAAmB,EAAA,EAAI,OAAO,CAAA;AAAA,IACpD,CAAA;AAAA,IAEA,MAAM,mBAAmB,EAAA,EAAY;AACnC,MAAA,OAAO,MAAM,MAAA,CAAO,kBAAA,CAAmB,EAAE,CAAA;AAAA,IAC3C,CAAA;AAAA,IAEA,MAAM,kBAAkB,OAAA,EAAe;AACrC,MAAA,OAAO,MAAM,MAAA,CAAO,iBAAA,CAAkB,OAAO,CAAA;AAAA,IAC/C,CAAA;AAAA,IAEA,MAAM,cAAc,MAAA,EAAa;AAC/B,MAAA,OAAO,MAAM,MAAA,CAAO,aAAA,CAAc,MAAM,CAAA;AAAA,IAC1C,CAAA;AAAA,IAEA,MAAM,WAAW,EAAA,EAAY;AAC3B,MAAA,OAAO,MAAM,MAAA,CAAO,UAAA,CAAW,EAAE,CAAA;AAAA,IACnC,CAAA;AAAA,IAEA,MAAM,aAAA,CAAc,EAAA,EAAY,OAAA,EAAc;AAC5C,MAAA,OAAO,MAAM,MAAA,CAAO,aAAA,CAAc,EAAA,EAAI,OAAO,CAAA;AAAA,IAC/C,CAAA;AAAA,IAEA,MAAM,gBAAgB,EAAA,EAAY;AAChC,MAAA,OAAO,MAAM,MAAA,CAAO,eAAA,CAAgB,EAAE,CAAA;AAAA,IACxC,CAAA;AAAA,IAEA,MAAM,UAAA,CAAW,EAAA,EAAY,eAAA,EAA0B;AACrD,MAAA,OAAO,MAAM,MAAA,CAAO,UAAA,CAAW,EAAA,EAAI,eAAe,CAAA;AAAA,IACpD,CAAA;AAAA,IAEA,MAAM,aAAa,OAAA,EAAe;AAChC,MAAA,OAAO,MAAM,MAAA,CAAO,YAAA,CAAa,OAAO,CAAA;AAAA,IAC1C,CAAA;AAAA,IAEA,MAAM,aAAa,MAAA,EAAa;AAC9B,MAAA,OAAO,MAAM,MAAA,CAAO,YAAA,CAAa,MAAM,CAAA;AAAA,IACzC,CAAA;AAAA,IAEA,MAAM,UAAU,EAAA,EAAY;AAC1B,MAAA,OAAO,MAAM,MAAA,CAAO,SAAA,CAAU,EAAE,CAAA;AAAA,IAClC,CAAA;AAAA,IAEA,MAAM,YAAY,SAAA,EAAoB;AACpC,MAAA,OAAO,MAAM,MAAA,CAAO,WAAA,CAAY,SAAS,CAAA;AAAA,IAC3C,CAAA;AAAA,IAEA,MAAM,WAAW,OAAA,EAAc;AAC7B,MAAA,OAAO,MAAM,MAAA,CAAO,UAAA,CAAW,OAAO,CAAA;AAAA,IACxC,CAAA;AAAA,IAEA,MAAM,aAAa,OAAA,EAAc;AAC/B,MAAA,OAAO,MAAM,MAAA,CAAO,YAAA,CAAa,OAAO,CAAA;AAAA,IAC1C,CAAA;AAAA,IAEA,MAAM,eAAA,CAAgB,UAAA,EAAoB,SAAA,EAAmB,MAAA,EAAgB;AAC3E,MAAA,OAAO,MAAM,MAAA,CAAO,eAAA,CAAgB,UAAA,EAAY,WAAW,MAAM,CAAA;AAAA,IACnE,CAAA;AAAA,IAEA,MAAM,iBAAA,CAAkB,UAAA,EAAoB,OAAA,EAAkB,MAAA,EAAiB;AAC7E,MAAA,OAAO,MAAM,MAAA,CAAO,iBAAA,CAAkB,UAAA,EAAY,SAAS,MAAM,CAAA;AAAA,IACnE;AAAA,GACF;AACF","file":"index.mjs","sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { Carnil, CarnilConfig } from '@carnil/core';\n\n// ============================================================================\n// Carnil Handler Configuration\n// ============================================================================\n\nexport interface CarnilHandlerConfig {\n  provider: CarnilConfig['provider'];\n  identify: (req: NextRequest) => Promise<{ customerId: string; customerData?: any }>;\n  corsHeaders?: Record<string, string>;\n  debug?: boolean;\n}\n\n// ============================================================================\n// Carnil Handler for Next.js App Router\n// ============================================================================\n\nexport function createCarnilHandler(config: CarnilHandlerConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return async function carnilHandler(req: NextRequest) {\n    try {\n      // Handle CORS preflight\n      if (req.method === 'OPTIONS') {\n        return new NextResponse(null, {\n          status: 200,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n            ...config.corsHeaders,\n          },\n        });\n      }\n\n      // Extract customer information\n      const { customerId } = await config.identify(req);\n\n      if (!customerId) {\n        return NextResponse.json({ error: 'Customer ID is required' }, { status: 401 });\n      }\n\n      // Parse the request body\n      const body = await req.json().catch(() => ({}));\n      const { action, ...params } = body as any;\n\n      // Route the request based on action\n      let result: any;\n\n      switch (action) {\n        case 'createCustomer':\n          result = await carnil.createCustomer(params);\n          break;\n        case 'getCustomer':\n          result = await carnil.getCustomer(params.id);\n          break;\n        case 'updateCustomer':\n          result = await carnil.updateCustomer(params.id, params.updates);\n          break;\n        case 'deleteCustomer':\n          result = await carnil.deleteCustomer(params.id);\n          break;\n        case 'listCustomers':\n          result = await carnil.listCustomers(params.request);\n          break;\n        case 'createPaymentIntent':\n          result = await carnil.createPaymentIntent(params);\n          break;\n        case 'getPaymentIntent':\n          result = await carnil.getPaymentIntent(params.id);\n          break;\n        case 'updatePaymentIntent':\n          result = await carnil.updatePaymentIntent(params.id, params.updates);\n          break;\n        case 'cancelPaymentIntent':\n          result = await carnil.cancelPaymentIntent(params.id);\n          break;\n        case 'confirmPaymentIntent':\n          result = await carnil.confirmPaymentIntent(params.id, params.paymentMethodId);\n          break;\n        case 'capturePaymentIntent':\n          result = await carnil.capturePaymentIntent(params.id, params.amount);\n          break;\n        case 'listPaymentIntents':\n          result = await carnil.listPaymentIntents(params.request);\n          break;\n        case 'createSubscription':\n          result = await carnil.createSubscription(params);\n          break;\n        case 'getSubscription':\n          result = await carnil.getSubscription(params.id);\n          break;\n        case 'updateSubscription':\n          result = await carnil.updateSubscription(params.id, params.updates);\n          break;\n        case 'cancelSubscription':\n          result = await carnil.cancelSubscription(params.id);\n          break;\n        case 'listSubscriptions':\n          result = await carnil.listSubscriptions(params);\n          break;\n        case 'createInvoice':\n          result = await carnil.createInvoice(params);\n          break;\n        case 'getInvoice':\n          result = await carnil.getInvoice(params.id);\n          break;\n        case 'updateInvoice':\n          result = await carnil.updateInvoice(params.id, params.updates);\n          break;\n        case 'finalizeInvoice':\n          result = await carnil.finalizeInvoice(params.id);\n          break;\n        case 'payInvoice':\n          result = await carnil.payInvoice(params.id, params.paymentMethodId);\n          break;\n        case 'listInvoices':\n          result = await carnil.listInvoices(params.request);\n          break;\n        case 'createRefund':\n          result = await carnil.createRefund(params);\n          break;\n        case 'getRefund':\n          result = await carnil.getRefund(params.id);\n          break;\n        case 'listRefunds':\n          result = await carnil.listRefunds(params.paymentId);\n          break;\n        case 'trackUsage':\n          result = await carnil.trackUsage(params);\n          break;\n        case 'trackAIUsage':\n          result = await carnil.trackAIUsage(params);\n          break;\n        case 'getUsageMetrics':\n          result = await carnil.getUsageMetrics(params.customerId, params.featureId, params.period);\n          break;\n        case 'getAIUsageMetrics':\n          result = await carnil.getAIUsageMetrics(params.customerId, params.modelId, params.period);\n          break;\n        default:\n          return NextResponse.json({ error: `Unknown action: ${action}` }, { status: 400 });\n      }\n\n      return NextResponse.json(result, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n          ...config.corsHeaders,\n        },\n      });\n    } catch (error) {\n      console.error('Carnil handler error:', error);\n\n      return NextResponse.json(\n        {\n          error: error instanceof Error ? error.message : 'Internal server error',\n          success: false,\n        },\n        {\n          status: 500,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n            ...config.corsHeaders,\n          },\n        }\n      );\n    }\n  };\n}\n\n// ============================================================================\n// Webhook Handler for Next.js App Router\n// ============================================================================\n\nexport function createCarnilWebhookHandler(config: CarnilHandlerConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return async function carnilWebhookHandler(req: NextRequest) {\n    try {\n      const body = await req.text();\n      const signature =\n        req.headers.get('stripe-signature') ||\n        req.headers.get('razorpay-signature') ||\n        req.headers.get('x-signature') ||\n        '';\n\n      const webhookSecret = config.provider.webhookSecret;\n      if (!webhookSecret) {\n        return NextResponse.json({ error: 'Webhook secret not configured' }, { status: 400 });\n      }\n\n      // Verify webhook signature\n      const isValid = await carnil.verifyWebhook(body, signature, webhookSecret);\n      if (!isValid) {\n        return NextResponse.json({ error: 'Invalid webhook signature' }, { status: 400 });\n      }\n\n      // Parse webhook event\n      const event = await carnil.parseWebhook(body, signature, webhookSecret);\n\n      // Handle webhook event\n      // This is where you would implement your webhook handling logic\n      console.log('Webhook event received:', event);\n\n      return NextResponse.json({ received: true });\n    } catch (error) {\n      console.error('Carnil webhook handler error:', error);\n\n      return NextResponse.json(\n        {\n          error: error instanceof Error ? error.message : 'Internal server error',\n        },\n        { status: 500 }\n      );\n    }\n  };\n}\n\n// ============================================================================\n// Server Actions for Next.js\n// ============================================================================\n\nexport function createCarnilServerActions(config: CarnilHandlerConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return {\n    async createCustomer(params: any) {\n      return await carnil.createCustomer(params);\n    },\n\n    async getCustomer(id: string) {\n      return await carnil.getCustomer(id);\n    },\n\n    async updateCustomer(id: string, updates: any) {\n      return await carnil.updateCustomer(id, updates);\n    },\n\n    async deleteCustomer(id: string) {\n      return await carnil.deleteCustomer(id);\n    },\n\n    async listCustomers(request?: any) {\n      return await carnil.listCustomers(request);\n    },\n\n    async createPaymentIntent(params: any) {\n      return await carnil.createPaymentIntent(params);\n    },\n\n    async getPaymentIntent(id: string) {\n      return await carnil.getPaymentIntent(id);\n    },\n\n    async updatePaymentIntent(id: string, updates: any) {\n      return await carnil.updatePaymentIntent(id, updates);\n    },\n\n    async cancelPaymentIntent(id: string) {\n      return await carnil.cancelPaymentIntent(id);\n    },\n\n    async confirmPaymentIntent(id: string, paymentMethodId?: string) {\n      return await carnil.confirmPaymentIntent(id, paymentMethodId);\n    },\n\n    async capturePaymentIntent(id: string, amount?: number) {\n      return await carnil.capturePaymentIntent(id, amount);\n    },\n\n    async listPaymentIntents(request?: any) {\n      return await carnil.listPaymentIntents(request);\n    },\n\n    async createSubscription(params: any) {\n      return await carnil.createSubscription(params);\n    },\n\n    async getSubscription(id: string) {\n      return await carnil.getSubscription(id);\n    },\n\n    async updateSubscription(id: string, updates: any) {\n      return await carnil.updateSubscription(id, updates);\n    },\n\n    async cancelSubscription(id: string) {\n      return await carnil.cancelSubscription(id);\n    },\n\n    async listSubscriptions(request?: any) {\n      return await carnil.listSubscriptions(request);\n    },\n\n    async createInvoice(params: any) {\n      return await carnil.createInvoice(params);\n    },\n\n    async getInvoice(id: string) {\n      return await carnil.getInvoice(id);\n    },\n\n    async updateInvoice(id: string, updates: any) {\n      return await carnil.updateInvoice(id, updates);\n    },\n\n    async finalizeInvoice(id: string) {\n      return await carnil.finalizeInvoice(id);\n    },\n\n    async payInvoice(id: string, paymentMethodId?: string) {\n      return await carnil.payInvoice(id, paymentMethodId);\n    },\n\n    async listInvoices(request?: any) {\n      return await carnil.listInvoices(request);\n    },\n\n    async createRefund(params: any) {\n      return await carnil.createRefund(params);\n    },\n\n    async getRefund(id: string) {\n      return await carnil.getRefund(id);\n    },\n\n    async listRefunds(paymentId?: string) {\n      return await carnil.listRefunds(paymentId);\n    },\n\n    async trackUsage(metrics: any) {\n      return await carnil.trackUsage(metrics);\n    },\n\n    async trackAIUsage(metrics: any) {\n      return await carnil.trackAIUsage(metrics);\n    },\n\n    async getUsageMetrics(customerId: string, featureId: string, period: string) {\n      return await carnil.getUsageMetrics(customerId, featureId, period);\n    },\n\n    async getAIUsageMetrics(customerId: string, modelId?: string, period?: string) {\n      return await carnil.getAIUsageMetrics(customerId, modelId, period);\n    },\n  };\n}\n"]}