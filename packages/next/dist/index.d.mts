import * as _carnil_core from '@carnil/core';
import { CarnilConfig } from '@carnil/core';
export { AIUsageMetrics, CarnilConfig, CarnilResponse, CreateCustomerRequest, CreateInvoiceRequest, CreatePaymentIntentRequest, CreateRefundRequest, CreateSubscriptionRequest, Customer, CustomerListRequest, Dispute, Invoice, InvoiceListRequest, ListResponse, PaymentIntent, PaymentIntentListRequest, PaymentMethod, Refund, Subscription, SubscriptionListRequest, UpdateCustomerRequest, UsageMetrics, WebhookEvent } from '@carnil/core';
import { NextRequest, NextResponse } from 'next/server';

interface CarnilHandlerConfig {
    provider: CarnilConfig['provider'];
    identify: (req: NextRequest) => Promise<{
        customerId: string;
        customerData?: any;
    }>;
    corsHeaders?: Record<string, string>;
    debug?: boolean;
}
declare function createCarnilHandler(config: CarnilHandlerConfig): (req: NextRequest) => Promise<NextResponse<any>>;
declare function createCarnilWebhookHandler(config: CarnilHandlerConfig): (req: NextRequest) => Promise<NextResponse<{
    error: string;
}> | NextResponse<{
    received: boolean;
}>>;
declare function createCarnilServerActions(config: CarnilHandlerConfig): {
    createCustomer(params: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        email?: string | undefined;
        name?: string | undefined;
        phone?: string | undefined;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        deleted?: boolean | undefined;
    }>>;
    getCustomer(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        email?: string | undefined;
        name?: string | undefined;
        phone?: string | undefined;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        deleted?: boolean | undefined;
    }>>;
    updateCustomer(id: string, updates: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        email?: string | undefined;
        name?: string | undefined;
        phone?: string | undefined;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        deleted?: boolean | undefined;
    }>>;
    deleteCustomer(id: string): Promise<_carnil_core.CarnilResponse<void>>;
    listCustomers(request?: any): Promise<_carnil_core.CarnilResponse<_carnil_core.ListResponse<{
        id: string;
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        email?: string | undefined;
        name?: string | undefined;
        phone?: string | undefined;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        deleted?: boolean | undefined;
    }>>>;
    createPaymentIntent(params: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>;
    getPaymentIntent(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>;
    updatePaymentIntent(id: string, updates: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>;
    cancelPaymentIntent(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>;
    confirmPaymentIntent(id: string, paymentMethodId?: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>;
    capturePaymentIntent(id: string, amount?: number): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>;
    listPaymentIntents(request?: any): Promise<_carnil_core.CarnilResponse<_carnil_core.ListResponse<{
        id: string;
        status: "requires_payment_method" | "requires_confirmation" | "requires_action" | "processing" | "requires_capture" | "canceled" | "succeeded" | "failed";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        clientSecret?: string | undefined;
        paymentMethodId?: string | undefined;
        receiptEmail?: string | undefined;
    }>>>;
    createSubscription(params: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "unpaid" | "paused";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        cancelAtPeriodEnd: boolean;
        metadata?: Record<string, string> | undefined;
        canceledAt?: Date | undefined;
        trialStart?: Date | undefined;
        trialEnd?: Date | undefined;
    }>>;
    getSubscription(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "unpaid" | "paused";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        cancelAtPeriodEnd: boolean;
        metadata?: Record<string, string> | undefined;
        canceledAt?: Date | undefined;
        trialStart?: Date | undefined;
        trialEnd?: Date | undefined;
    }>>;
    updateSubscription(id: string, updates: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "unpaid" | "paused";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        cancelAtPeriodEnd: boolean;
        metadata?: Record<string, string> | undefined;
        canceledAt?: Date | undefined;
        trialStart?: Date | undefined;
        trialEnd?: Date | undefined;
    }>>;
    cancelSubscription(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "unpaid" | "paused";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        cancelAtPeriodEnd: boolean;
        metadata?: Record<string, string> | undefined;
        canceledAt?: Date | undefined;
        trialStart?: Date | undefined;
        trialEnd?: Date | undefined;
    }>>;
    listSubscriptions(request?: any): Promise<_carnil_core.CarnilResponse<_carnil_core.ListResponse<{
        id: string;
        status: "canceled" | "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "unpaid" | "paused";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        currentPeriodStart: Date;
        currentPeriodEnd: Date;
        cancelAtPeriodEnd: boolean;
        metadata?: Record<string, string> | undefined;
        canceledAt?: Date | undefined;
        trialStart?: Date | undefined;
        trialEnd?: Date | undefined;
    }>>>;
    createInvoice(params: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "void" | "draft" | "open" | "paid" | "uncollectible";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        amountPaid: number;
        amountDue: number;
        subtotal: number;
        tax: number;
        total: number;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        subscriptionId?: string | undefined;
        hostedInvoiceUrl?: string | undefined;
        invoicePdf?: string | undefined;
        dueDate?: Date | undefined;
        paidAt?: Date | undefined;
    }>>;
    getInvoice(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "void" | "draft" | "open" | "paid" | "uncollectible";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        amountPaid: number;
        amountDue: number;
        subtotal: number;
        tax: number;
        total: number;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        subscriptionId?: string | undefined;
        hostedInvoiceUrl?: string | undefined;
        invoicePdf?: string | undefined;
        dueDate?: Date | undefined;
        paidAt?: Date | undefined;
    }>>;
    updateInvoice(id: string, updates: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "void" | "draft" | "open" | "paid" | "uncollectible";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        amountPaid: number;
        amountDue: number;
        subtotal: number;
        tax: number;
        total: number;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        subscriptionId?: string | undefined;
        hostedInvoiceUrl?: string | undefined;
        invoicePdf?: string | undefined;
        dueDate?: Date | undefined;
        paidAt?: Date | undefined;
    }>>;
    finalizeInvoice(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "void" | "draft" | "open" | "paid" | "uncollectible";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        amountPaid: number;
        amountDue: number;
        subtotal: number;
        tax: number;
        total: number;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        subscriptionId?: string | undefined;
        hostedInvoiceUrl?: string | undefined;
        invoicePdf?: string | undefined;
        dueDate?: Date | undefined;
        paidAt?: Date | undefined;
    }>>;
    payInvoice(id: string, paymentMethodId?: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "void" | "draft" | "open" | "paid" | "uncollectible";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        amountPaid: number;
        amountDue: number;
        subtotal: number;
        tax: number;
        total: number;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        subscriptionId?: string | undefined;
        hostedInvoiceUrl?: string | undefined;
        invoicePdf?: string | undefined;
        dueDate?: Date | undefined;
        paidAt?: Date | undefined;
    }>>;
    listInvoices(request?: any): Promise<_carnil_core.CarnilResponse<_carnil_core.ListResponse<{
        id: string;
        status: "void" | "draft" | "open" | "paid" | "uncollectible";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        customerId: string;
        amount: number;
        currency: string;
        amountPaid: number;
        amountDue: number;
        subtotal: number;
        tax: number;
        total: number;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        subscriptionId?: string | undefined;
        hostedInvoiceUrl?: string | undefined;
        invoicePdf?: string | undefined;
        dueDate?: Date | undefined;
        paidAt?: Date | undefined;
    }>>>;
    createRefund(params: any): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "succeeded" | "failed" | "pending";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        amount: number;
        currency: string;
        paymentId: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        reason?: "duplicate" | "fraudulent" | "requested_by_customer" | undefined;
    }>>;
    getRefund(id: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "succeeded" | "failed" | "pending";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        amount: number;
        currency: string;
        paymentId: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        reason?: "duplicate" | "fraudulent" | "requested_by_customer" | undefined;
    }>>;
    listRefunds(paymentId?: string): Promise<_carnil_core.CarnilResponse<{
        id: string;
        status: "canceled" | "succeeded" | "failed" | "pending";
        created: Date;
        updated: Date;
        provider: string;
        providerId: string;
        amount: number;
        currency: string;
        paymentId: string;
        description?: string | undefined;
        metadata?: Record<string, string> | undefined;
        reason?: "duplicate" | "fraudulent" | "requested_by_customer" | undefined;
    }[]>>;
    trackUsage(metrics: any): Promise<_carnil_core.CarnilResponse<void>>;
    trackAIUsage(metrics: any): Promise<_carnil_core.CarnilResponse<void>>;
    getUsageMetrics(customerId: string, featureId: string, period: string): Promise<_carnil_core.CarnilResponse<{
        customerId: string;
        featureId: string;
        usage: number;
        period: "day" | "week" | "month" | "year";
        startDate: Date;
        endDate: Date;
        metadata?: Record<string, string> | undefined;
        limit?: number | undefined;
    }[]>>;
    getAIUsageMetrics(customerId: string, modelId?: string, period?: string): Promise<_carnil_core.CarnilResponse<{
        customerId: string;
        modelId: string;
        tokens: number;
        inputTokens: number;
        outputTokens: number;
        cost: number;
        timestamp: Date;
        metadata?: Record<string, string> | undefined;
    }[]>>;
};

export { type CarnilHandlerConfig, createCarnilHandler, createCarnilServerActions, createCarnilWebhookHandler };
