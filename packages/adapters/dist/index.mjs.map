{"version":3,"sources":["../src/express.ts","../src/hono.ts"],"names":["Carnil"],"mappings":"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","file":"index.mjs","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { Carnil, CarnilConfig } from '@carnil/core';\n\n// ============================================================================\n// Express Adapter Configuration\n// ============================================================================\n\nexport interface ExpressCarnilConfig {\n  provider: CarnilConfig['provider'];\n  identify: (req: Request) => Promise<{ customerId: string; customerData?: any }>;\n  corsHeaders?: Record<string, string>;\n  debug?: boolean;\n}\n\n// ============================================================================\n// Express Middleware for Carnil\n// ============================================================================\n\nexport function createCarnilExpressHandler(config: ExpressCarnilConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return async function carnilExpressHandler(req: Request, res: Response, _next: NextFunction) {\n    try {\n      // Handle CORS preflight\n      if (req.method === 'OPTIONS') {\n        res.status(200).json({});\n        return;\n      }\n\n      // Extract customer information\n      const { customerId } = await config.identify(req);\n\n      if (!customerId) {\n        res.status(401).json({ error: 'Customer ID is required' });\n        return;\n      }\n\n      // Parse the request body\n      const { action, ...params } = req.body;\n\n      // Route the request based on action\n      let result: any;\n\n      switch (action) {\n        case 'createCustomer':\n          result = await carnil.createCustomer(params);\n          break;\n        case 'getCustomer':\n          result = await carnil.getCustomer(params.id);\n          break;\n        case 'updateCustomer':\n          result = await carnil.updateCustomer(params.id, params.updates);\n          break;\n        case 'deleteCustomer':\n          result = await carnil.deleteCustomer(params.id);\n          break;\n        case 'listCustomers':\n          result = await carnil.listCustomers(params.request);\n          break;\n        case 'createPaymentIntent':\n          result = await carnil.createPaymentIntent(params);\n          break;\n        case 'getPaymentIntent':\n          result = await carnil.getPaymentIntent(params.id);\n          break;\n        case 'updatePaymentIntent':\n          result = await carnil.updatePaymentIntent(params.id, params.updates);\n          break;\n        case 'cancelPaymentIntent':\n          result = await carnil.cancelPaymentIntent(params.id);\n          break;\n        case 'confirmPaymentIntent':\n          result = await carnil.confirmPaymentIntent(params.id, params.paymentMethodId);\n          break;\n        case 'capturePaymentIntent':\n          result = await carnil.capturePaymentIntent(params.id, params.amount);\n          break;\n        case 'listPaymentIntents':\n          result = await carnil.listPaymentIntents(params.request);\n          break;\n        case 'createSubscription':\n          result = await carnil.createSubscription(params);\n          break;\n        case 'getSubscription':\n          result = await carnil.getSubscription(params.id);\n          break;\n        case 'updateSubscription':\n          result = await carnil.updateSubscription(params.id, params.updates);\n          break;\n        case 'cancelSubscription':\n          result = await carnil.cancelSubscription(params.id);\n          break;\n        case 'listSubscriptions':\n          result = await carnil.listSubscriptions(params.request);\n          break;\n        case 'createInvoice':\n          result = await carnil.createInvoice(params);\n          break;\n        case 'getInvoice':\n          result = await carnil.getInvoice(params.id);\n          break;\n        case 'updateInvoice':\n          result = await carnil.updateInvoice(params.id, params.updates);\n          break;\n        case 'finalizeInvoice':\n          result = await carnil.finalizeInvoice(params.id);\n          break;\n        case 'payInvoice':\n          result = await carnil.payInvoice(params.id, params.paymentMethodId);\n          break;\n        case 'listInvoices':\n          result = await carnil.listInvoices(params.request);\n          break;\n        case 'createRefund':\n          result = await carnil.createRefund(params);\n          break;\n        case 'getRefund':\n          result = await carnil.getRefund(params.id);\n          break;\n        case 'listRefunds':\n          result = await carnil.listRefunds(params.paymentId);\n          break;\n        case 'trackUsage':\n          result = await carnil.trackUsage(params);\n          break;\n        case 'trackAIUsage':\n          result = await carnil.trackAIUsage(params);\n          break;\n        case 'getUsageMetrics':\n          result = await carnil.getUsageMetrics(params.customerId, params.featureId, params.period);\n          break;\n        case 'getAIUsageMetrics':\n          result = await carnil.getAIUsageMetrics(params.customerId, params.modelId, params.period);\n          break;\n        default:\n          res.status(400).json({ error: `Unknown action: ${action}` });\n          return;\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error('Carnil Express handler error:', error);\n\n      res.status(500).json({\n        error: error instanceof Error ? error.message : 'Internal server error',\n        success: false,\n      });\n    }\n  };\n}\n\n// ============================================================================\n// Express Webhook Handler\n// ============================================================================\n\nexport function createCarnilExpressWebhookHandler(config: ExpressCarnilConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return async function carnilExpressWebhookHandler(\n    req: Request,\n    res: Response,\n    _next: NextFunction\n  ) {\n    try {\n      const body = JSON.stringify(req.body);\n      const signature =\n        (req.headers['stripe-signature'] as string) ||\n        (req.headers['razorpay-signature'] as string) ||\n        (req.headers['x-signature'] as string) ||\n        '';\n\n      const webhookSecret = config.provider.webhookSecret;\n      if (!webhookSecret) {\n        res.status(400).json({ error: 'Webhook secret not configured' });\n        return;\n      }\n\n      // Verify webhook signature\n      const isValid = await carnil.verifyWebhook(body, signature, webhookSecret);\n      if (!isValid) {\n        res.status(400).json({ error: 'Invalid webhook signature' });\n        return;\n      }\n\n      // Parse webhook event\n      const event = await carnil.parseWebhook(body, signature, webhookSecret);\n\n      // Handle webhook event\n      // This is where you would implement your webhook handling logic\n      console.log('Webhook event received:', event);\n\n      res.json({ received: true });\n    } catch (error) {\n      console.error('Carnil Express webhook handler error:', error);\n\n      res.status(500).json({\n        error: error instanceof Error ? error.message : 'Internal server error',\n      });\n    }\n  };\n}\n\n// ============================================================================\n// Express Middleware Setup\n// ============================================================================\n\nexport function setupCarnilExpress(app: any, config: ExpressCarnilConfig) {\n  // Add CORS headers\n  app.use((_req: Request, res: Response, next: NextFunction) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    if (config.corsHeaders) {\n      Object.entries(config.corsHeaders).forEach(([key, value]) => {\n        res.header(key, value);\n      });\n    }\n\n    next();\n  });\n\n  // Mount Carnil handler\n  app.use('/api/carnil', createCarnilExpressHandler(config));\n\n  // Mount webhook handler\n  app.use('/api/carnil/webhook', createCarnilExpressWebhookHandler(config));\n}\n","import { Context, Hono } from 'hono';\nimport { Carnil, CarnilConfig } from '@carnil/core';\n\n// ============================================================================\n// Hono Adapter Configuration\n// ============================================================================\n\nexport interface HonoCarnilConfig {\n  provider: CarnilConfig['provider'];\n  identify: (c: Context) => Promise<{ customerId: string; customerData?: any }>;\n  corsHeaders?: Record<string, string>;\n  debug?: boolean;\n}\n\n// ============================================================================\n// Hono Middleware for Carnil\n// ============================================================================\n\nexport function createCarnilHonoHandler(config: HonoCarnilConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return async function carnilHonoHandler(c: Context) {\n    try {\n      // Handle CORS preflight\n      if (c.req.method === 'OPTIONS') {\n        return c.json({}, 200);\n      }\n\n      // Extract customer information\n      const { customerId } = await config.identify(c);\n\n      if (!customerId) {\n        return c.json({ error: 'Customer ID is required' }, 401);\n      }\n\n      // Parse the request body\n      const body = await c.req.json().catch(() => ({}));\n      const { action, ...params } = body;\n\n      // Route the request based on action\n      let result: any;\n\n      switch (action) {\n        case 'createCustomer':\n          result = await carnil.createCustomer(params);\n          break;\n        case 'getCustomer':\n          result = await carnil.getCustomer(params.id);\n          break;\n        case 'updateCustomer':\n          result = await carnil.updateCustomer(params.id, params.updates);\n          break;\n        case 'deleteCustomer':\n          result = await carnil.deleteCustomer(params.id);\n          break;\n        case 'listCustomers':\n          result = await carnil.listCustomers(params.request);\n          break;\n        case 'createPaymentIntent':\n          result = await carnil.createPaymentIntent(params);\n          break;\n        case 'getPaymentIntent':\n          result = await carnil.getPaymentIntent(params.id);\n          break;\n        case 'updatePaymentIntent':\n          result = await carnil.updatePaymentIntent(params.id, params.updates);\n          break;\n        case 'cancelPaymentIntent':\n          result = await carnil.cancelPaymentIntent(params.id);\n          break;\n        case 'confirmPaymentIntent':\n          result = await carnil.confirmPaymentIntent(params.id, params.paymentMethodId);\n          break;\n        case 'capturePaymentIntent':\n          result = await carnil.capturePaymentIntent(params.id, params.amount);\n          break;\n        case 'listPaymentIntents':\n          result = await carnil.listPaymentIntents(params.request);\n          break;\n        case 'createSubscription':\n          result = await carnil.createSubscription(params);\n          break;\n        case 'getSubscription':\n          result = await carnil.getSubscription(params.id);\n          break;\n        case 'updateSubscription':\n          result = await carnil.updateSubscription(params.id, params.updates);\n          break;\n        case 'cancelSubscription':\n          result = await carnil.cancelSubscription(params.id);\n          break;\n        case 'listSubscriptions':\n          result = await carnil.listSubscriptions(params.request);\n          break;\n        case 'createInvoice':\n          result = await carnil.createInvoice(params);\n          break;\n        case 'getInvoice':\n          result = await carnil.getInvoice(params.id);\n          break;\n        case 'updateInvoice':\n          result = await carnil.updateInvoice(params.id, params.updates);\n          break;\n        case 'finalizeInvoice':\n          result = await carnil.finalizeInvoice(params.id);\n          break;\n        case 'payInvoice':\n          result = await carnil.payInvoice(params.id, params.paymentMethodId);\n          break;\n        case 'listInvoices':\n          result = await carnil.listInvoices(params.request);\n          break;\n        case 'createRefund':\n          result = await carnil.createRefund(params);\n          break;\n        case 'getRefund':\n          result = await carnil.getRefund(params.id);\n          break;\n        case 'listRefunds':\n          result = await carnil.listRefunds(params.paymentId);\n          break;\n        case 'trackUsage':\n          result = await carnil.trackUsage(params);\n          break;\n        case 'trackAIUsage':\n          result = await carnil.trackAIUsage(params);\n          break;\n        case 'getUsageMetrics':\n          result = await carnil.getUsageMetrics(params.customerId, params.featureId, params.period);\n          break;\n        case 'getAIUsageMetrics':\n          result = await carnil.getAIUsageMetrics(params.customerId, params.modelId, params.period);\n          break;\n        default:\n          return c.json({ error: `Unknown action: ${action}` }, 400);\n      }\n\n      return c.json(result);\n    } catch (error) {\n      console.error('Carnil Hono handler error:', error);\n\n      return c.json(\n        {\n          error: error instanceof Error ? error.message : 'Internal server error',\n          success: false,\n        },\n        500\n      );\n    }\n  };\n}\n\n// ============================================================================\n// Hono Webhook Handler\n// ============================================================================\n\nexport function createCarnilHonoWebhookHandler(config: HonoCarnilConfig) {\n  const carnil = new Carnil({\n    provider: config.provider,\n    debug: config.debug,\n  });\n\n  return async function carnilHonoWebhookHandler(c: Context) {\n    try {\n      const body = await c.req.text();\n      const signature =\n        c.req.header('stripe-signature') ||\n        c.req.header('razorpay-signature') ||\n        c.req.header('x-signature') ||\n        '';\n\n      const webhookSecret = config.provider.webhookSecret;\n      if (!webhookSecret) {\n        return c.json({ error: 'Webhook secret not configured' }, 400);\n      }\n\n      // Verify webhook signature\n      const isValid = await carnil.verifyWebhook(body, signature, webhookSecret);\n      if (!isValid) {\n        return c.json({ error: 'Invalid webhook signature' }, 400);\n      }\n\n      // Parse webhook event\n      const event = await carnil.parseWebhook(body, signature, webhookSecret);\n\n      // Handle webhook event\n      // This is where you would implement your webhook handling logic\n      console.log('Webhook event received:', event);\n\n      return c.json({ received: true });\n    } catch (error) {\n      console.error('Carnil Hono webhook handler error:', error);\n\n      return c.json(\n        {\n          error: error instanceof Error ? error.message : 'Internal server error',\n        },\n        500\n      );\n    }\n  };\n}\n\n// ============================================================================\n// Hono App Setup\n// ============================================================================\n\nexport function setupCarnilHono(app: Hono, config: HonoCarnilConfig) {\n  // Add CORS middleware\n  app.use('*', async (c: any, next: any) => {\n    c.header('Access-Control-Allow-Origin', '*');\n    c.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    c.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    if (config.corsHeaders) {\n      Object.entries(config.corsHeaders).forEach(([key, value]) => {\n        c.header(key, value);\n      });\n    }\n\n    await next();\n  });\n\n  // Mount Carnil handler\n  app.post('/api/carnil', createCarnilHonoHandler(config));\n\n  // Mount webhook handler\n  app.post('/api/carnil/webhook', createCarnilHonoWebhookHandler(config));\n}\n"]}