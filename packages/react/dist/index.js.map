{"version":3,"sources":["../src/context/carnil-provider.tsx","../src/hooks/use-customer.ts"],"names":["createContext","useState","useEffect","Carnil","jsxs","jsx","useContext","useCallback"],"mappings":"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","file":"index.js","sourcesContent":["import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { Carnil, CarnilConfig } from '@carnil/core';\n\n// ============================================================================\n// Carnil Context\n// ============================================================================\n\ninterface CarnilContextValue {\n  carnil: Carnil | undefined;\n  isLoading: boolean;\n  error: string | null;\n  config: CarnilConfig | null;\n}\n\nconst CarnilContext = createContext<CarnilContextValue | undefined>(undefined);\n\n// ============================================================================\n// Carnil Provider Props\n// ============================================================================\n\nexport interface CarnilProviderProps {\n  children: ReactNode;\n  config: CarnilConfig;\n  fallback?: ReactNode;\n  onError?: (error: Error) => void;\n}\n\n// ============================================================================\n// Carnil Provider Component\n// ============================================================================\n\nexport function CarnilProvider({ children, config, fallback, onError }: CarnilProviderProps) {\n  const [carnil, setCarnil] = useState<Carnil | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initializeCarnil = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const carnilInstance = new Carnil(config);\n\n        // Perform health check\n        const isHealthy = await carnilInstance.healthCheck();\n        if (!isHealthy) {\n          throw new Error('Carnil health check failed');\n        }\n\n        setCarnil(carnilInstance);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Failed to initialize Carnil';\n        setError(errorMessage);\n        onError?.(err instanceof Error ? err : new Error(errorMessage));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeCarnil();\n  }, [config, onError]);\n\n  const contextValue: CarnilContextValue = {\n    carnil,\n    isLoading,\n    error,\n    config,\n  };\n\n  if (isLoading && fallback) {\n    return <>{fallback}</>;\n  }\n\n  if (error) {\n    return (\n      <div style={{ padding: '1rem', color: 'red' }}>\n        <h3>Carnil Error</h3>\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return <CarnilContext.Provider value={contextValue}>{children}</CarnilContext.Provider>;\n}\n\n// ============================================================================\n// Hook to use Carnil context\n// ============================================================================\n\nexport function useCarnilContext(): CarnilContextValue {\n  const context = useContext(CarnilContext);\n\n  if (!context) {\n    throw new Error('useCarnilContext must be used within a CarnilProvider');\n  }\n\n  return context;\n}\n\n// ============================================================================\n// Hook to get Carnil instance\n// ============================================================================\n\nexport function useCarnil(): Carnil {\n  const { carnil } = useCarnilContext();\n\n  if (!carnil) {\n    throw new Error(\n      'Carnil instance not available. Make sure CarnilProvider is properly configured.'\n    );\n  }\n\n  return carnil;\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport { useCarnil } from '../context/carnil-provider';\nimport type {\n  Customer,\n  CreateCustomerRequest,\n  UpdateCustomerRequest,\n  CustomerListRequest,\n  ListResponse,\n  CarnilResponse,\n} from '@carnil/core';\n\n// ============================================================================\n// Customer Hook State\n// ============================================================================\n\ninterface UseCustomerState {\n  customer: Customer | null;\n  customers: Customer[];\n  isLoading: boolean;\n  error: string | null;\n  hasMore: boolean;\n  totalCount?: number;\n}\n\ninterface UseCustomerActions {\n  createCustomer: (request: CreateCustomerRequest) => Promise<CarnilResponse<Customer>>;\n  updateCustomer: (id: string, request: UpdateCustomerRequest) => Promise<CarnilResponse<Customer>>;\n  deleteCustomer: (id: string) => Promise<CarnilResponse<void>>;\n  fetchCustomer: (id: string) => Promise<CarnilResponse<Customer>>;\n  listCustomers: (request?: CustomerListRequest) => Promise<CarnilResponse<ListResponse<Customer>>>;\n  refetch: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport type UseCustomerReturn = UseCustomerState & UseCustomerActions;\n\n// ============================================================================\n// Single Customer Hook\n// ============================================================================\n\nexport function useCustomer(customerId?: string): UseCustomerReturn {\n  const carnil = useCarnil();\n  const [state, setState] = useState<UseCustomerState>({\n    customer: null,\n    customers: [],\n    isLoading: false,\n    error: null,\n    hasMore: false,\n    totalCount: undefined,\n  });\n\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n\n  const createCustomer = useCallback(\n    async (request: CreateCustomerRequest): Promise<CarnilResponse<Customer>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.createCustomer(request);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customer: response.data,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to create customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const updateCustomer = useCallback(\n    async (id: string, request: UpdateCustomerRequest): Promise<CarnilResponse<Customer>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.updateCustomer(id, request);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customer: response.data,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to update customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to update customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const deleteCustomer = useCallback(\n    async (id: string): Promise<CarnilResponse<void>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.deleteCustomer(id);\n\n        if (response.success) {\n          setState(prev => ({\n            ...prev,\n            customer: null,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to delete customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to delete customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: undefined, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const fetchCustomer = useCallback(\n    async (id: string): Promise<CarnilResponse<Customer>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.getCustomer(id);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customer: response.data,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to fetch customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to fetch customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const listCustomers = useCallback(\n    async (request?: CustomerListRequest): Promise<CarnilResponse<ListResponse<Customer>>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.listCustomers(request);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customers: response.data.data,\n            hasMore: response.data.hasMore,\n            totalCount: response.data.totalCount,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to list customers',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to list customers';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const refetch = useCallback(async (): Promise<void> => {\n    if (customerId) {\n      await fetchCustomer(customerId);\n    } else {\n      await listCustomers();\n    }\n  }, [customerId, fetchCustomer, listCustomers]);\n\n  // Auto-fetch customer if customerId is provided\n  useEffect(() => {\n    if (customerId) {\n      fetchCustomer(customerId);\n    }\n  }, [customerId, fetchCustomer]);\n\n  return {\n    ...state,\n    createCustomer,\n    updateCustomer,\n    deleteCustomer,\n    fetchCustomer,\n    listCustomers,\n    refetch,\n    clearError,\n  };\n}\n\n// ============================================================================\n// Customer List Hook\n// ============================================================================\n\nexport function useCustomerList(initialRequest?: CustomerListRequest): UseCustomerReturn {\n  const carnil = useCarnil();\n  const [state, setState] = useState<UseCustomerState>({\n    customer: null,\n    customers: [],\n    isLoading: false,\n    error: null,\n    hasMore: false,\n    totalCount: undefined,\n  });\n\n  const clearError = useCallback(() => {\n    setState(prev => ({ ...prev, error: null }));\n  }, []);\n\n  const listCustomers = useCallback(\n    async (request?: CustomerListRequest): Promise<CarnilResponse<ListResponse<Customer>>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.listCustomers(request);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customers: response.data.data,\n            hasMore: response.data.hasMore,\n            totalCount: response.data.totalCount,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to list customers',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to list customers';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const createCustomer = useCallback(\n    async (request: CreateCustomerRequest): Promise<CarnilResponse<Customer>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.createCustomer(request);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customers: [response.data, ...prev.customers],\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to create customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to create customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const updateCustomer = useCallback(\n    async (id: string, request: UpdateCustomerRequest): Promise<CarnilResponse<Customer>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.updateCustomer(id, request);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customers: prev.customers.map(c => (c.id === id ? response.data! : c)),\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to update customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to update customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const deleteCustomer = useCallback(\n    async (id: string): Promise<CarnilResponse<void>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.deleteCustomer(id);\n\n        if (response.success) {\n          setState(prev => ({\n            ...prev,\n            customers: prev.customers.filter(c => c.id !== id),\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to delete customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to delete customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: undefined, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const fetchCustomer = useCallback(\n    async (id: string): Promise<CarnilResponse<Customer>> => {\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\n\n      try {\n        const response = await carnil.getCustomer(id);\n\n        if (response.success && response.data) {\n          setState(prev => ({\n            ...prev,\n            customer: response.data,\n            isLoading: false,\n          }));\n        } else {\n          setState(prev => ({\n            ...prev,\n            error: response.error || 'Failed to fetch customer',\n            isLoading: false,\n          }));\n        }\n\n        return response;\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Failed to fetch customer';\n        setState(prev => ({\n          ...prev,\n          error: errorMessage,\n          isLoading: false,\n        }));\n        return { data: null as any, success: false, error: errorMessage };\n      }\n    },\n    [carnil]\n  );\n\n  const refetch = useCallback(async (): Promise<void> => {\n    await listCustomers(initialRequest);\n  }, [listCustomers, initialRequest]);\n\n  // Auto-fetch customers on mount\n  useEffect(() => {\n    listCustomers(initialRequest);\n  }, [listCustomers, initialRequest]);\n\n  return {\n    ...state,\n    createCustomer,\n    updateCustomer,\n    deleteCustomer,\n    fetchCustomer,\n    listCustomers,\n    refetch,\n    clearError,\n  };\n}\n"]}